---
// import { db, UserProfile } from "astro:db"
// import { sql } from "drizzle-orm"

// // Fetch count per age
// async function getAgeCounts() {
// 	try {
// 		// Query: group by age and count
// 		const results = await db
// 			.select({
// 				age: UserProfile.age,
// 				count: sql`COUNT(*)`.as("count"),
// 			})
// 			.from(UserProfile)
// 			.where(
// 				sql`${UserProfile.age} IS NOT NULL AND ${UserProfile.age} > 0 AND ${UserProfile.age} < 120`
// 			)
// 			.groupBy(UserProfile.age)
// 			.orderBy(UserProfile.age)

// 		const ages = results.map((r) => r.age)
// 		const counts = results.map((r) => Number(r.count))
// 		const totalUsers = counts.reduce((a, b) => a + b, 0)

// 		return { ages, counts, totalUsers }
// 	} catch (error) {
// 		console.error("Error fetching age counts:", error)
// 		return { ages: [], counts: [], totalUsers: 0 }
// 	}
// }

// const { ages, counts, totalUsers } = await getAgeCounts()
// console.log("Ages", ages)
// console.log("Counts", counts)
// console.log("Total Users", totalUsers)

const ages = [
		18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
		36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
		54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
		72, 74, 75, 76, 77, 78, 81, 84, 86, 90, 91, 94, 95, 97, 98, 99, 100,
	],
	counts = [
		596, 841, 1060, 1373, 1826, 2222, 3354, 3495, 3742, 3861, 3621, 3793,
		3688, 3389, 3212, 2989, 3010, 2703, 2262, 2009, 1710, 1512, 1401, 1166,
		1081, 937, 961, 840, 607, 470, 429, 403, 329, 240, 205, 178, 210, 137,
		98, 87, 52, 55, 41, 30, 20, 19, 17, 13, 7, 13, 10, 5, 5, 4, 2, 2, 2, 1,
		1, 1, 1, 1, 1, 1, 3, 2, 2, 1, 3, 1, 2,
	],
	totalUsers = 66365
---

<div
	id="age-histogram-container"
	class="w-full h-96 p-4"
>
	<canvas id="age-histogram-chart"></canvas>
	<!-- <div class="mb-4 text-center">
		<p class="text-sm text-gray-600">
			Total Users: {totalUsers.toLocaleString()}
		</p>
	</div> -->
</div>

<script
	is:inline
	src="https://cdn.jsdelivr.net/npm/chart.js"
></script>
<script is:inline define:vars={{ ages, counts, totalUsers }}>
	function computeBins(ages, counts, binSize = 5, startAge = 18) {
		const maxAge = Math.max(...ages)
		const bins = []
		const binnedCounts = []

		for (let age = startAge; age <= maxAge; age += binSize) {
			bins.push(`${age}-${age + binSize - 1}`)
			binnedCounts.push(0)
		}

		ages.forEach((age, i) => {
			if (age < startAge) return // skip ages below 18
			const binIndex = Math.floor((age - startAge) / binSize)
			binnedCounts[binIndex] += counts[i]
		})

		return { bins, binnedCounts }
	}

	// Usage
	const { bins, binnedCounts } = computeBins(ages, counts, 4, 18)

	// Create Chart.js histogram
	function initChart() {
		const ctx = document.getElementById("age-histogram-chart")

		new Chart(ctx, {
			type: "bar",
			data: {
				labels: bins,
				datasets: [
					{
						label: "Number of Users",
						data: binnedCounts,
						backgroundColor: "#C0BBFF",
						borderColor: "#C0BBFF",
						borderWidth: 1,
						borderRadius: 6,
						borderSkipped: false,
					},
				],
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				plugins: {
					title: {
						display: true,
						text: "User Age Distribution",
						font: {
							size: 18,
							weight: "bold",
							family: "Plus Jakarta Sans, sans-serif",
						},
					},
					legend: { display: false },
					tooltip: {
						callbacks: {
							title: (ctx) => `Age Range: ${ctx[0].label}`,
							label: (ctx) => {
								const percentage = (
									(ctx.parsed.y / totalUsers) *
									100
								).toFixed(1)
								return [
									`Users: ${ctx.parsed.y.toLocaleString()}`,
									`Percentage: ${percentage}%`,
								]
							},
						},
					},
				},
				scales: {
					x: {
						title: { display: true, text: "Age Range" },
						grid: { display: false },
					},
					y: {
						title: { display: true, text: "Number of Users" },
						beginAtZero: true,
						grid: { color: "rgba(0,0,0,0.1)" },
						ticks: { callback: (val) => val.toLocaleString() },
					},
				},
			},
		})
	}

	if (document.readyState === "loading") {
		document.addEventListener("DOMContentLoaded", initChart)
	} else {
		initChart()
	}
</script>

<style>
	#age-histogram-container {
		position: relative;
		height: 300px;
	}

	canvas {
		max-height: 100%;
	}
</style>
